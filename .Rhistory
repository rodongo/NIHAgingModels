persDEG <- function(cons, dis){
require(dplyr)
expDesign <- c(rep(1, ncol(cons)-1), rep(2, ncol(dis)-1))
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
design <- model.matrix(~0 + factor(expDesign))#Adjust this based on the exprimental setup
colnames(design) <- c('control', 'disease')#
contrast <- makeContrasts(disease - control, levels = design)
fit <- lmFit(exprData, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
degDF <- topTable(fit2, n = 'Inf', sort.by = 'none')[, c(1,4)]
fc <- degDF[,1]
for(j in 1:length(fc)){
fc[j] <- ifelse(fc[j]>0, 2^fc[j],-1*2^abs(fc[j]))
}
Sizes <- rep(1,ncol(exprData))
PPDE <- EBTest(Data=as.matrix(exprData), Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
PPDE <- GetPPMat(PPDE)
return(data.frame(GeneID = rownames(exprData), PPDE = PPDE[,2], FC = fc))
}
dgeRes <- persDEG(cons, dis)
expDesign <- c(rep(1, ncol(cons)-1), rep(2, ncol(dis)-1))
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
View(exprData)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
design <- model.matrix(~0 + factor(expDesign))#Adjust this based on the exprimental setup
colnames(design) <- c('control', 'disease')#
contrast <- makeContrasts(disease - control, levels = design)
fit <- lmFit(exprData, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
degDF <- topTable(fit2, n = 'Inf', sort.by = 'none')[, c(1,4)]
fc <- degDF[,1]
for(j in 1:length(fc)){
fc[j] <- ifelse(fc[j]>0, 2^fc[j],-1*2^abs(fc[j]))
}
Sizes <- rep(1,ncol(exprData))
PPDE <- EBTest(Data=as.matrix(exprData), Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
PPDE <- EBTest(Data=matrix(exprData), Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
exprData <- matrix(exprData)
View(exprData)
fc
str(exprData)
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
str(exprData)
exprData.1 <- data.matrix(exprData)
View(exprData.1)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
str(exprData.1)
View(exprData.1)
View(cons)
cons.rem <- which(cons$GeneID==';' | cons$GeneID=='')
cons.rem
cons <- cons[-cons.rem,]
dis <- dis[-cons.rem,]
expDesign <- c(rep(1, ncol(cons)-1), rep(2, ncol(dis)-1))
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
View(exprData)
cons <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[1])
dis <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[2])
cons.rem <- which(cons$GeneID==';' | cons$GeneID==''| cons$GeneID=='1'| cons$GeneID=='1;')
cons.rem
cons <- cons[-cons.rem,]
dis <- dis[-cons.rem,]
expDesign <- c(rep(1, ncol(cons)-1), rep(2, ncol(dis)-1))
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
View(exprData)
design <- model.matrix(~0 + factor(expDesign))#Adjust this based on the exprimental setup
colnames(design) <- c('control', 'disease')#
contrast <- makeContrasts(disease - control, levels = design)
fit <- lmFit(exprData, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
degDF <- topTable(fit2, n = 'Inf', sort.by = 'none')[, c(1,4)]
fc <- degDF[,1]
for(j in 1:length(fc)){
fc[j] <- ifelse(fc[j]>0, 2^fc[j],-1*2^abs(fc[j]))
}
Sizes <- rep(1,ncol(exprData))
exprData.1 <- data.matrix(exprData)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
View(exprData.1)
exprData.1 <- matrix(exprData[,c(1:ncol(exprData))])
exprData.1 <- matrix(data = exprData[,c(1:ncol(exprData))])
exprData.1 <- matrix(data = exprData[,c(1:ncol(exprData))],
ncol = ncol(exprData), nrow = nrow(exprData))
exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
ncol = ncol(exprData), nrow = nrow(exprData))
exprData.1 <- as.numeric(unlist(exprData))
View(exprData.1)
exprData.1 <- exprData
exprData.1 <- exprData
exprData.1[] <- sapply(exprData.1, function(x){as.numeric(x)})
str(exprData.1)
View(exprData.1)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
exprData.1 <- apply(as.matrix.noquote(exprData),  # Using apply function
2,
as.numeric)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
View(exprData.1)
rownames(exprData)
names(exprData.1) <- rownames(exprData)
View(exprData.1)
row.names(exprData.1)
exprData.1 <- apply(as.matrix.noquote(exprData),  # Using apply function
2,
as.numeric)
row.names(exprData.1) <- rownames(exprData)
View(exprData.1)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
expDesign
PPDE <- EBTest(Data=exprData.1, Conditions=expDesign,
sizeFactors = Sizes, maxround = 10)
View(exprData.1)
type(exprData.1)
str(exprData.1)
str(GeneMat)
View(GeneMat)
colnames(exprData.1) <- NULL
str(exprData.1)
PPDE <- EBTest(Data=exprData.1, Conditions=expDesign,
sizeFactors = Sizes, maxround = 10)
exprData.1
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions=expDesign,
sizeFactors = Sizes, maxround = 10)
Sizes <- rep(1,ncol(exprData))
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
exprData.1
# exprData.1[] <- sapply(exprData.1, function(x){as.numeric(x)})
exprData.1 <- apply(as.matrix.noquote(exprData),  # Using apply function
2,
as.numeric)
View(exprData.1)
row.names(exprData.1) <- rownames(exprData)
View(exprData.1)
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
type(exprData.1)
class(exprData.1)
class(GeneMat)
expDesign
PPDE
Sizes <- rep(1,ncol(GeneMat))
EBOut <- EBTest(Data=GeneMat, Conditions=as.factor(rep(c("C1","C2"),each=5)),
sizeFactors = Sizes, maxround = 10)
PP <- GetPPMat(EBOut)
FC <- EBSeq::PostFC(EBOut)
View(FC)
expDesign <- c(rep('control', ncol(cons)-1), rep('disease', ncol(dis)-1))
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
Sizes <- rep(1,ncol(exprData))
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
View(EBTest)
View(GetNormalizedMat)
exprData.1
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1])))+1)
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
design <- model.matrix(~0 + factor(expDesign))#Adjust this based on the exprimental setup
colnames(design) <- c('control', 'disease')#
contrast <- makeContrasts(disease - control, levels = design)
fit <- lmFit(exprData, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
degDF <- topTable(fit2, n = 'Inf', sort.by = 'none')[, c(1,4)]
fc <- degDF[,1]
for(j in 1:length(fc)){
fc[j] <- ifelse(fc[j]>0, 2^fc[j],-1*2^abs(fc[j]))
}
Sizes <- rep(1,ncol(exprData))
exprData.1 <- exprData
# exprData.1[] <- sapply(exprData.1, function(x){as.numeric(x)})
exprData.1 <- apply(as.matrix.noquote(exprData),  # Using apply function
2,
as.numeric)
row.names(exprData.1) <- rownames(exprData)
colnames(exprData.1) <- NULL
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
library(readr)
GSE153873_summary_count_star_txt <- read_delim("C:/Users/odong/Downloads/GSE153873_summary_count.star.txt.gz",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(GSE153873_summary_count_star_txt)
library(readxl)
iMAT_gse152539_newModel <- read_excel("iMAT_gse152539_newModel.xlsx",
col_names = FALSE)
library(readxl)
Human_GEM <- read_excel("D:/Projects/NIH/Human-GEM.xlsx",
sheet = "METS")
View(Human_GEM)
Human_GEM.metab <- read_excel("D:/Projects/NIH/Human-GEM.xlsx",
sheet = "METS")
Human_GEM.rxns <- read_excel("D:/Projects/NIH/Human-GEM.xlsx",
sheet = "RXNS")
library(tidyverse)
library(dplyr)
View(Human_GEM.rxns)
View(Human_GEM.metab)
i <- 1
metData <- Human_GEM.rxns %>% filter(.$EQUATION %in% Human_GEM.metab$ID[i])
View(metData)
i <- 1
metData <- Human_GEM.rxns[grepl(Human_GEM.metab$ID[i],Human_GEM.rxns$EQUATION)==1,]
Human_GEM.metab$ID[i]
j <- 1
eqnJ <- Human_GEM.rxns$EQUATION[j]
eqnJ
met <- 'ethanol[c]'
metData <- Human_GEM.rxns[grepl(met,eqnJ)==1,]
library(readr)
GSE149540_fpkm <- read_delim("D:/Projects/NIH/Rat/GSE149540_fpkm.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(GSE149540_fpkm)
?adjacency
install.packages("WGCNA")
?adjacency
library(WGCNA)
BiocManager::install('GO.db')
library(WGCNA)
BiocManager::install('impute')
library(WGCNA)
BiocManager::install('preprocessCore')
library(WGCNA)
?adjacency
library(tidyverse)
library(tidyr)
library(dplyr)
library(readxl)
library(openxlsx)
library(stringi)
fl <- 'D:/Projects/PhD Thesis/Results/Results/Tables/AD Clusters/'
f1.files <- list.files(path = paste0(fl), pattern = '.xlsx')
i <- 1
wb <- loadWorkbook(paste0(fl,f1.files[i]))
names(wb)
j <- 1
df <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j])
paste0(fl,f1.files[i])
readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j])
j <- 1
readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j])
wb
file.i <- f1.files[i]
wb <- names(loadWorkbook(paste0(fl,f1.files[i])))
wb[j]
readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j])
df <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j])
HumanGEM <- read_excel('D:/Projects/NIH/Human-GEM.xlsx')
HumanGEM$ID
df <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j]) %>%
mutate(Subsystem = HumanGEM$SUBSYSTEM[match(.$Reaction,HumanGEM$ID)])
View(df)
# j <- 1
df <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j]) %>%
mutate(Subsystem = HumanGEM$SUBSYSTEM[match(.$Reaction,HumanGEM$ID)]) %>%
select(Reaction, Subsystem,FPValue,OR)
# j <- 1
df <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j]) %>%
mutate(Subsystem = HumanGEM$SUBSYSTEM[match(.$Reaction,HumanGEM$ID)]) %>%
select(Reaction, Subsystem,FPValue,OR) %>%
filter(.FPValue < 0.05)
# j <- 1
df <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j]) %>%
mutate(Subsystem = HumanGEM$SUBSYSTEM[match(.$Reaction,HumanGEM$ID)]) %>%
select(Reaction, Subsystem,FPValue,OR) %>%
filter(.$FPValue < 0.05)
# j <- 1
df <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j]) %>%
mutate(Subsystem = HumanGEM$SUBSYSTEM[match(.$Reaction,HumanGEM$ID)],
Equation = HumanGEM$EQUATION[match(.$Reaction,HumanGEM$ID)]) %>%
select(Reaction, Subsystem,Equation, FPValue, OR) %>%
filter(.$FPValue < 0.05)
file.i
freshMicroATAC <- list()
freshMicromRNA <- list()
for(i in 1:length(f1.files)){
# i <- 1
file.i <- f1.files[i]
wb <- names(loadWorkbook(paste0(fl,f1.files[i])))
for(j in 1:length(wb)){
# j <- 1
df <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = wb[j]) %>%
mutate(Subsystem = HumanGEM$SUBSYSTEM[match(.$Reaction,HumanGEM$ID)],
Equation = HumanGEM$EQUATION[match(.$Reaction,HumanGEM$ID)]) %>%
select(Reaction, Subsystem,Equation, FPValue, OR) %>%
filter(.$FPValue < 0.05)
ifelse(i==1,
freshMicroATAC[[paste0(wb[j])]] <- df,
freshMicromRNA[[paste0(wb[j])]] <- df)
}
}
View(freshMicroATAC)
View(freshMicromRNA)
View(freshMicroATAC)
View(freshMicromRNA)
setwd('D:/Projects/NIH/')
load('iMAT_Fisher.RData')
library(readxl)
library(openxlsx)
library(dplyr)
library(VarfromPDB)
library(RISmed)
library(stringi)
View(GSE129296_MIC_APPS1_12M_P085)
View(ftMetAlt2.df)
subsystemEnrich <- function(input.df){
lnRxns <- c(1,2,3,5,10)
listRxns1 <- list()
listRxns2 <- list()
for(a in 1:length(lnRxns)){
df <- data.frame(matrix(data = NA,
ncol = ncol(input.df)-1,
nrow = nrow(input.df)))
row.names(df) <- input.df$Subsystem
colnames(df) <- colnames(input.df[,-1])
df.1 <- input.df[,-1]
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
df[i,j] <- ifelse(df.1[i,j]>lnRxns[a],1,0)
}
}
# Fraction of datasets a subsystem is considered active
listRxns1[[paste0(lnRxns[a])]] <- data.frame(Subsystem = rownames(df),
FractionActive = apply(df,1,function(x){sum(x)/ncol(df)*100}))
listRxns2[[paste0(lnRxns[a])]] <- data.frame(Dataset = colnames(df),
NumberActive = apply(df,2,function(x){x=sum(x)}))
}
return(listRxns1,listRxns2)
}
listRxns1 <- subsystemEnrich(ftMetAlt2.df)
subsystemEnrich <- function(input.df){
lnRxns <- c(1,2,3,5,10)
listRxns1 <- list()
listRxns2 <- list()
for(a in 1:length(lnRxns)){
df <- data.frame(matrix(data = NA,
ncol = ncol(input.df)-1,
nrow = nrow(input.df)))
row.names(df) <- input.df$Subsystem
colnames(df) <- colnames(input.df[,-1])
df.1 <- input.df[,-1]
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
df[i,j] <- ifelse(df.1[i,j]>lnRxns[a],1,0)
}
}
# Fraction of datasets a subsystem is considered active
listRxns1[[paste0(lnRxns[a])]] <- data.frame(Subsystem = rownames(df),
FractionActive = apply(df,1,function(x){sum(x)/ncol(df)*100}))
listRxns2[[paste0(lnRxns[a])]] <- data.frame(Dataset = colnames(df),
NumberActive = apply(df,2,function(x){x=sum(x)}))
}
listRxns <- list('1' = listRxns1, '2' = listRxns2)
return(listRxns)
}
listRxns1 <- subsystemEnrich(ftMetAlt2.df)
View(listRxns1)
View(listRxns1[["1"]][["1"]])
listRxns1 <- subsystemEnrich(ftMetAlt2.df)[[1]]
listRxns1 <- subsystemEnrich(ftMetAlt2.df)[[2]]
View(listRxns1)
subsystemEnrich <- function(input.df){
lnRxns <- c(1,2,3,5,10)
listRxns1 <- list()
listRxns2 <- list()
for(a in 1:length(lnRxns)){
df <- data.frame(matrix(data = NA,
ncol = ncol(input.df)-1,
nrow = nrow(input.df)))
row.names(df) <- input.df$Subsystem
colnames(df) <- colnames(input.df[,-1])
df.1 <- input.df[,-1]
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
df[i,j] <- ifelse(df.1[i,j]>lnRxns[a],1,0)
}
}
# Fraction of datasets a subsystem is considered active
df.Rxns1 <- data.frame(Subsystem = rownames(df),FractionActive = apply(df,1,function(x){sum(x)/ncol(df)*100}))
colnames(df.Rxns1)[2] <- paste0(colnames(df.Rxns1)[2],'_',lnRxns[a])
listRxns1[[paste0(lnRxns[a])]] <- df.Rxns1
df.Rxns2 <- data.frame(Dataset = colnames(df),NumberActive = apply(df,2,function(x){x=sum(x)}))
colnames(df.Rxns2)[2] <- paste0(colnames(df.Rxns2)[2],'_',lnRxns[a])
listRxns2[[paste0(lnRxns[a])]] <- df.Rxns2
}
listRxns <- list('1' = listRxns1, '2' = listRxns2)
return(listRxns)
}
listRxns1 <- subsystemEnrich(ftMetAlt2.df)[[1]]
listRxns1 <- subsystemEnrich(ftMetAlt2.df)[[2]]
View(listRxns1)
View(listRxns1[["1"]])
subsystemEnrich <- function(input.df){
lnRxns <- c(1,2,3,5,10)
listRxns1 <- list()
listRxns2 <- list()
for(a in 1:length(lnRxns)){
df <- data.frame(matrix(data = NA,
ncol = ncol(input.df)-1,
nrow = nrow(input.df)))
row.names(df) <- input.df$Subsystem
colnames(df) <- colnames(input.df[,-1])
df.1 <- input.df[,-1]
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
df[i,j] <- ifelse(df.1[i,j]>lnRxns[a],1,0)
}
}
# Fraction of datasets a subsystem is considered active
df.Rxns1 <- data.frame(Subsystem = rownames(df),FractionActive = apply(df,1,function(x){sum(x)/ncol(df)*100}))
colnames(df.Rxns1)[2] <- paste0(colnames(df.Rxns1)[2],'_>',lnRxns[a])
listRxns1[[paste0(lnRxns[a])]] <- df.Rxns1
df.Rxns2 <- data.frame(Dataset = colnames(df),NumberActive = apply(df,2,function(x){x=sum(x)}))
colnames(df.Rxns2)[2] <- paste0(colnames(df.Rxns2)[2],'_>',lnRxns[a])
listRxns2[[paste0(lnRxns[a])]] <- df.Rxns2
}
listRxns <- list('1' = listRxns1, '2' = listRxns2)
return(listRxns)
}
listRxns1 <- subsystemEnrich(ftMetAlt2.df)[[1]]
listRxns1 <- subsystemEnrich(ftMetAlt2.df)[[2]]
View(listRxns1)
View(listRxns1[["1"]])
View(listRxns2)
View(listRxns2[["1"]])
View(listRxns1)
View(listRxns1[["1"]])
library(plyr)
listRxns.1 <- join_all(listRxns1, 'Dataset')
View(listRxns.1)
View(listRxns2)
View(listRxns2[["5"]])
View(brain.Specific.2$MICROGLIA)
View(brain.Specific.fre$MICROGLIA)
MIC.Fractions <- subsystemEnrich(brain.Specific.fre$MICROGLIA)[[1]]
View(MIC.Fractions)
View(MIC.Fractions[["1"]])
library(tibble)
MIC.Fractions <- subsystemEnrich(brain.Specific.fre$MICROGLIA %>% rownames_to_column(var = 'Subsystem'))[[1]]
View(MIC.Fractions)
View(MIC.Fractions[["1"]])
# MICROGLIA
MIC.Fractions_1 <- subsystemEnrich(brain.Specific.fre$MICROGLIA %>% rownames_to_column(var = 'Subsystem'))[[1]]
MIC.Fractions_2 <- subsystemEnrich(brain.Specific.fre$MICROGLIA %>% rownames_to_column(var = 'Subsystem'))[[2]]
View(MIC.Fractions)
View(MIC.Fractions[["1"]])
MIC.Fractions_1 <- join_all(MIC.Fractions_1, by = 'Subsystem')
View(MIC.Fractions_1)
top.Pathways <- list()
top.Pathways[['MICROGLIA']] <- join_all(MIC.Fractions_1, by = 'Subsystem')
# MICROGLIA
MIC.Fractions_1 <- subsystemEnrich(brain.Specific.fre$MICROGLIA %>% rownames_to_column(var = 'Subsystem'))[[1]]
top.Pathways[['MICROGLIA']] <- join_all(MIC.Fractions_1, by = 'Subsystem')
# HIPPOCAMPUS
HIP.Fractions_1 <- subsystemEnrich(brain.Specific.fre$HIPPOCAMPUS %>% rownames_to_column(var = 'Subsystem'))[[1]]
top.Pathways[['HIPPOCAMPUS']] <- join_all(HIP.Fractions_1, by = 'Subsystem')
top.Pathways %>% writexl::write_xlsx('D:/Projects/NIH/Mouse/Results/brain_regions_path_fractions.xlsx')
View(ftMetAlt2)
View(ftMetAlt2.df)
View(listRxns.1)
View(ftMetAlt.5.df)
View(brain.Specific)
View(brain.Specific[["MICROGLIA"]])
View(ftMetAlt)
View(ftMetAlt[["GSE129296_MIC_APPS1_3M"]])
