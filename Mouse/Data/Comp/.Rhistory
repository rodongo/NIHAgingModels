exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
design <- model.matrix(~0 + factor(expDesign))#Adjust this based on the exprimental setup
colnames(design) <- c('control', 'disease')#
contrast <- makeContrasts(disease - control, levels = design)
fit <- lmFit(exprData, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
degDF <- topTable(fit2, n = 'Inf', sort.by = 'none')[, c(1,4)]
fc <- degDF[,1]
for(j in 1:length(fc)){
fc[j] <- ifelse(fc[j]>0, 2^fc[j],-1*2^abs(fc[j]))
}
Sizes <- rep(1,ncol(exprData))
PPDE <- EBTest(Data=exprData, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
PPDE <- GetPPMat(PPDE)
return(data.frame(GeneID = rownames(exprData), PPDE = PPDE[,2], FC = fc))
}
dgeRes <- persDEG(cons, dis)
# library(preprocessCore)
persDEG <- function(cons, dis){
require(dplyr)
expDesign <- c(rep(1, ncol(cons)-1), rep(2, ncol(dis)-1))
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
design <- model.matrix(~0 + factor(expDesign))#Adjust this based on the exprimental setup
colnames(design) <- c('control', 'disease')#
contrast <- makeContrasts(disease - control, levels = design)
fit <- lmFit(exprData, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
degDF <- topTable(fit2, n = 'Inf', sort.by = 'none')[, c(1,4)]
fc <- degDF[,1]
for(j in 1:length(fc)){
fc[j] <- ifelse(fc[j]>0, 2^fc[j],-1*2^abs(fc[j]))
}
Sizes <- rep(1,ncol(exprData))
PPDE <- EBTest(Data=as.matrix(exprData), Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
PPDE <- GetPPMat(PPDE)
return(data.frame(GeneID = rownames(exprData), PPDE = PPDE[,2], FC = fc))
}
dgeRes <- persDEG(cons, dis)
expDesign <- c(rep(1, ncol(cons)-1), rep(2, ncol(dis)-1))
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
View(exprData)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
design <- model.matrix(~0 + factor(expDesign))#Adjust this based on the exprimental setup
colnames(design) <- c('control', 'disease')#
contrast <- makeContrasts(disease - control, levels = design)
fit <- lmFit(exprData, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
degDF <- topTable(fit2, n = 'Inf', sort.by = 'none')[, c(1,4)]
fc <- degDF[,1]
for(j in 1:length(fc)){
fc[j] <- ifelse(fc[j]>0, 2^fc[j],-1*2^abs(fc[j]))
}
Sizes <- rep(1,ncol(exprData))
PPDE <- EBTest(Data=as.matrix(exprData), Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
PPDE <- EBTest(Data=matrix(exprData), Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
exprData <- matrix(exprData)
View(exprData)
fc
str(exprData)
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
str(exprData)
exprData.1 <- data.matrix(exprData)
View(exprData.1)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
str(exprData.1)
View(exprData.1)
View(cons)
cons.rem <- which(cons$GeneID==';' | cons$GeneID=='')
cons.rem
cons <- cons[-cons.rem,]
dis <- dis[-cons.rem,]
expDesign <- c(rep(1, ncol(cons)-1), rep(2, ncol(dis)-1))
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
View(exprData)
cons <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[1])
dis <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[2])
cons.rem <- which(cons$GeneID==';' | cons$GeneID==''| cons$GeneID=='1'| cons$GeneID=='1;')
cons.rem
cons <- cons[-cons.rem,]
dis <- dis[-cons.rem,]
expDesign <- c(rep(1, ncol(cons)-1), rep(2, ncol(dis)-1))
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1]))))
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
View(exprData)
design <- model.matrix(~0 + factor(expDesign))#Adjust this based on the exprimental setup
colnames(design) <- c('control', 'disease')#
contrast <- makeContrasts(disease - control, levels = design)
fit <- lmFit(exprData, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
degDF <- topTable(fit2, n = 'Inf', sort.by = 'none')[, c(1,4)]
fc <- degDF[,1]
for(j in 1:length(fc)){
fc[j] <- ifelse(fc[j]>0, 2^fc[j],-1*2^abs(fc[j]))
}
Sizes <- rep(1,ncol(exprData))
exprData.1 <- data.matrix(exprData)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
View(exprData.1)
exprData.1 <- matrix(exprData[,c(1:ncol(exprData))])
exprData.1 <- matrix(data = exprData[,c(1:ncol(exprData))])
exprData.1 <- matrix(data = exprData[,c(1:ncol(exprData))],
ncol = ncol(exprData), nrow = nrow(exprData))
exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
ncol = ncol(exprData), nrow = nrow(exprData))
exprData.1 <- as.numeric(unlist(exprData))
View(exprData.1)
exprData.1 <- exprData
exprData.1 <- exprData
exprData.1[] <- sapply(exprData.1, function(x){as.numeric(x)})
str(exprData.1)
View(exprData.1)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
exprData.1 <- apply(as.matrix.noquote(exprData),  # Using apply function
2,
as.numeric)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
View(exprData.1)
rownames(exprData)
names(exprData.1) <- rownames(exprData)
View(exprData.1)
row.names(exprData.1)
exprData.1 <- apply(as.matrix.noquote(exprData),  # Using apply function
2,
as.numeric)
row.names(exprData.1) <- rownames(exprData)
View(exprData.1)
PPDE <- EBTest(Data=exprData.1, Conditions=as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
expDesign
PPDE <- EBTest(Data=exprData.1, Conditions=expDesign,
sizeFactors = Sizes, maxround = 10)
View(exprData.1)
type(exprData.1)
str(exprData.1)
str(GeneMat)
View(GeneMat)
colnames(exprData.1) <- NULL
str(exprData.1)
PPDE <- EBTest(Data=exprData.1, Conditions=expDesign,
sizeFactors = Sizes, maxround = 10)
exprData.1
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions=expDesign,
sizeFactors = Sizes, maxround = 10)
Sizes <- rep(1,ncol(exprData))
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
exprData.1
# exprData.1[] <- sapply(exprData.1, function(x){as.numeric(x)})
exprData.1 <- apply(as.matrix.noquote(exprData),  # Using apply function
2,
as.numeric)
View(exprData.1)
row.names(exprData.1) <- rownames(exprData)
View(exprData.1)
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
type(exprData.1)
class(exprData.1)
class(GeneMat)
expDesign
PPDE
Sizes <- rep(1,ncol(GeneMat))
EBOut <- EBTest(Data=GeneMat, Conditions=as.factor(rep(c("C1","C2"),each=5)),
sizeFactors = Sizes, maxround = 10)
PP <- GetPPMat(EBOut)
FC <- EBSeq::PostFC(EBOut)
View(FC)
expDesign <- c(rep('control', ncol(cons)-1), rep('disease', ncol(dis)-1))
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
Sizes <- rep(1,ncol(exprData))
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
View(EBTest)
View(GetNormalizedMat)
exprData.1
exprData <- log2(abs(as.matrix(cbind(cons[,-1],dis[,-1])))+1)
exprData <- data.frame(GeneID = cons$GeneID,exprData)
exprData <- aggregate(.~GeneID,exprData,max)
rownames(exprData) <- exprData$GeneID
exprData <- exprData[,-1]
design <- model.matrix(~0 + factor(expDesign))#Adjust this based on the exprimental setup
colnames(design) <- c('control', 'disease')#
contrast <- makeContrasts(disease - control, levels = design)
fit <- lmFit(exprData, design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
degDF <- topTable(fit2, n = 'Inf', sort.by = 'none')[, c(1,4)]
fc <- degDF[,1]
for(j in 1:length(fc)){
fc[j] <- ifelse(fc[j]>0, 2^fc[j],-1*2^abs(fc[j]))
}
Sizes <- rep(1,ncol(exprData))
exprData.1 <- exprData
# exprData.1[] <- sapply(exprData.1, function(x){as.numeric(x)})
exprData.1 <- apply(as.matrix.noquote(exprData),  # Using apply function
2,
as.numeric)
row.names(exprData.1) <- rownames(exprData)
colnames(exprData.1) <- NULL
# exprData.1 <- matrix(data = as.numeric(exprData[,c(1:ncol(exprData))]),
#                      ncol = ncol(exprData), nrow = nrow(exprData))
PPDE <- EBTest(Data=exprData.1, Conditions= as.factor(expDesign),
sizeFactors = Sizes, maxround = 10)
library(readr)
GSE153873_summary_count_star_txt <- read_delim("C:/Users/odong/Downloads/GSE153873_summary_count.star.txt.gz",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(GSE153873_summary_count_star_txt)
library(readxl)
iMAT_gse152539_newModel <- read_excel("iMAT_gse152539_newModel.xlsx",
col_names = FALSE)
setwd('D:/Projects/NIH/Mouse/Data/Comp/')
load('MethodologyComparison.RData')
library(dplyr)
library(tidyverse)
library(readxl)
expre.dis
expre.con
mean(expre.con[,-1]) - mean(expre.dis[,-1])
mean(numeric(expre.con[,-1]))
mean(as.numeric(expre.con[,-1]))
mean(as.numeric(expre.con[,-1])) - mean(as.numeric(expre.dis[,-1]))
mean(log2(as.numeric(expre.con[,-1]))) - mean(log2(as.numeric(expre.dis[,-1])))
mean(as.numeric(expre.con[,-1]))/mean(as.numeric(expre.dis[,-1]))
geneList
paste0(geneList[j],'_',fname)
boxPlotter <- function(df, XLab,geneListJ){
p <- ggplot(df, aes(x=Condition, y=Expression, fill=Condition)) +
geom_boxplot(position=position_dodge(1)) +
ggtitle(paste0(geneListJ)) +
xlab(paste0(XLab))
theme_classic()
return(p)
}
fl <- 'D:/Projects/NIH/Mouse/Trancriptome/'
f1.files <- list.files(path = 'D:/Projects/NIH/Mouse/Trancriptome/', pattern = '.xlsx')
for(i in 1:length(f1.files)){
# i <- 1
wb <- loadWorkbook(paste0(fl,f1.files[i]))
stNames <- names(wb)
cons <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[1])
dis <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[2])
for(j in 1:length(geneList)){
# j <- 14
if(geneList[j] %in% cons$GeneID){
expre.con <- cons %>% filter(.$GeneID == geneList[j])
expre.dis <- dis %>% filter(.$GeneID == geneList[j])
if(t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value < 0.05){
ttestRes <- t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value
geneFC <- mean(as.numeric(expre.con[,-1]))/mean(as.numeric(expre.dis[,-1])) #t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value
xLab <- paste0('p-value: ',ttestRes,' FC ',geneFC)
df.con <- expre.con[,-1]
colnames(df.con) <- rep('control',ncol(df.con))
df.dis <- expre.dis[,-1]
colnames(df.dis) <- rep('AD',ncol(df.dis))
df <- cbind(df.con,df.dis) %>%
pivot_longer(cols = starts_with('AD')|starts_with('con'),
names_to = 'Condition',
values_to = 'Expression')
fname <- gsub('.xlsx','',f1.files[i])
geneListJ <- paste0(geneList[j],'_',fname)
png(filename = paste0('D:/Projects/NIH/Mouse/Data/Comp/Genes_',fname,'.png'),
width = 6.5, height = 5.5, res = 600, units = 'in')
print(boxPlotter(df,xLab,geneListJ))
dev.off()
}
}
}
}
library(openxlsx)
fl <- 'D:/Projects/NIH/Mouse/Trancriptome/'
f1.files <- list.files(path = 'D:/Projects/NIH/Mouse/Trancriptome/', pattern = '.xlsx')
for(i in 1:length(f1.files)){
# i <- 1
wb <- loadWorkbook(paste0(fl,f1.files[i]))
stNames <- names(wb)
cons <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[1])
dis <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[2])
for(j in 1:length(geneList)){
# j <- 14
if(geneList[j] %in% cons$GeneID){
expre.con <- cons %>% filter(.$GeneID == geneList[j])
expre.dis <- dis %>% filter(.$GeneID == geneList[j])
if(t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value < 0.05){
ttestRes <- t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value
geneFC <- mean(as.numeric(expre.con[,-1]))/mean(as.numeric(expre.dis[,-1])) #t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value
xLab <- paste0('p-value: ',ttestRes,' FC ',geneFC)
df.con <- expre.con[,-1]
colnames(df.con) <- rep('control',ncol(df.con))
df.dis <- expre.dis[,-1]
colnames(df.dis) <- rep('AD',ncol(df.dis))
df <- cbind(df.con,df.dis) %>%
pivot_longer(cols = starts_with('AD')|starts_with('con'),
names_to = 'Condition',
values_to = 'Expression')
fname <- gsub('.xlsx','',f1.files[i])
geneListJ <- paste0(geneList[j],'_',fname)
png(filename = paste0('D:/Projects/NIH/Mouse/Data/Comp/Genes_',fname,'.png'),
width = 6.5, height = 5.5, res = 600, units = 'in')
print(boxPlotter(df,xLab,geneListJ))
dev.off()
}
}
}
}
ttestRes
round(ttestRes,digits = 4)
geneFC
round(geneFC,digits = 2)
for(i in 1:length(f1.files)){
# i <- 1
wb <- loadWorkbook(paste0(fl,f1.files[i]))
stNames <- names(wb)
cons <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[1])
dis <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[2])
for(j in 1:length(geneList)){
# j <- 14
if(geneList[j] %in% cons$GeneID){
expre.con <- cons %>% filter(.$GeneID == geneList[j])
expre.dis <- dis %>% filter(.$GeneID == geneList[j])
if(t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value < 0.05){
ttestRes <- t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value
geneFC <- mean(as.numeric(expre.con[,-1]))/mean(as.numeric(expre.dis[,-1])) #t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value
xLab <- paste0('p-value: ',round(ttestRes,digits = 4),' FC ',round(geneFC,digits = 2))
df.con <- expre.con[,-1]
colnames(df.con) <- rep('control',ncol(df.con))
df.dis <- expre.dis[,-1]
colnames(df.dis) <- rep('AD',ncol(df.dis))
df <- cbind(df.con,df.dis) %>%
pivot_longer(cols = starts_with('AD')|starts_with('con'),
names_to = 'Condition',
values_to = 'Expression')
fname <- gsub('.xlsx','',f1.files[i])
geneListJ <- paste0(geneList[j],'_',fname)
png(filename = paste0('D:/Projects/NIH/Mouse/Data/Comp/Genes_',fname,'.png'),
width = 6.5, height = 5.5, res = 600, units = 'in')
print(boxPlotter(df,xLab,geneListJ))
dev.off()
}
}
}
}
geneFC <- mean(as.numeric(expre.dis[,-1]))/mean(as.numeric(expre.con[,-1]))
geneFC
geneFC <- ifelse(geneFC>1,geneFC,-1/geneFC)
geneFC
paste0('D:/Projects/NIH/Mouse/Data/Comp/',geneList[j],'_Gene_',fname,'.png')
for(i in 1:length(f1.files)){
# i <- 1
wb <- loadWorkbook(paste0(fl,f1.files[i]))
stNames <- names(wb)
cons <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[1])
dis <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[2])
for(j in 1:length(geneList)){
# j <- 14
if(geneList[j] %in% cons$GeneID){
expre.con <- cons %>% filter(.$GeneID == geneList[j])
expre.dis <- dis %>% filter(.$GeneID == geneList[j])
if(t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value < 0.05){
ttestRes <- t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value
geneFC <- mean(as.numeric(expre.dis[,-1]))/mean(as.numeric(expre.con[,-1]))
geneFC <- ifelse(geneFC>1,geneFC,-1/geneFC)
xLab <- paste0('p-value: ',round(ttestRes,digits = 4),' FC ',round(geneFC,digits = 2))
df.con <- expre.con[,-1]
colnames(df.con) <- rep('control',ncol(df.con))
df.dis <- expre.dis[,-1]
colnames(df.dis) <- rep('AD',ncol(df.dis))
df <- cbind(df.con,df.dis) %>%
pivot_longer(cols = starts_with('AD')|starts_with('con'),
names_to = 'Condition',
values_to = 'Expression')
fname <- gsub('.xlsx','',f1.files[i])
geneListJ <- paste0(geneList[j],'_',fname)
png(filename = paste0('D:/Projects/NIH/Mouse/Data/Comp/',geneList[j],'_Gene_',fname,'.png'),
width = 6.5, height = 5.5, res = 600, units = 'in')
print(boxPlotter(df,xLab,geneListJ))
dev.off()
}
}
}
}
boxPlotter <- function(df, XLab,geneListJ){
p <- ggplot(df, aes(x=Condition, y=Expression, fill=Condition)) +
geom_violin() + geom_boxplot(width = .2)
# geom_boxplot(position=position_dodge(1)) +
ggtitle(paste0(geneListJ)) +
xlab(paste0(XLab))
theme_classic()
return(p)
}
for(i in 1:length(f1.files)){
# i <- 1
wb <- loadWorkbook(paste0(fl,f1.files[i]))
stNames <- names(wb)
cons <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[1])
dis <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[2])
for(j in 1:length(geneList)){
# j <- 14
if(geneList[j] %in% cons$GeneID){
expre.con <- cons %>% filter(.$GeneID == geneList[j])
expre.dis <- dis %>% filter(.$GeneID == geneList[j])
if(t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value < 0.05){
ttestRes <- t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value
geneFC <- mean(as.numeric(expre.dis[,-1]))/mean(as.numeric(expre.con[,-1]))
geneFC <- ifelse(geneFC>1,geneFC,-1/geneFC)
xLab <- paste0('p-value: ',round(ttestRes,digits = 4),' FC ',round(geneFC,digits = 2))
df.con <- expre.con[,-1]
colnames(df.con) <- rep('control',ncol(df.con))
df.dis <- expre.dis[,-1]
colnames(df.dis) <- rep('AD',ncol(df.dis))
df <- cbind(df.con,df.dis) %>%
pivot_longer(cols = starts_with('AD')|starts_with('con'),
names_to = 'Condition',
values_to = 'Expression')
fname <- gsub('.xlsx','',f1.files[i])
geneListJ <- paste0(geneList[j],'_',fname)
png(filename = paste0('D:/Projects/NIH/Mouse/Data/Comp/Plots/',geneList[j],'_Gene_',fname,'.png'),
width = 4.5, height = 4.5, res = 600, units = 'in')
print(boxPlotter(df,xLab,geneListJ))
dev.off()
}
}
}
}
boxPlotter <- function(df, XLab,geneListJ){
p <- ggplot(df, aes(x=Condition, y=Expression, fill=Condition)) +
geom_violin() +
geom_boxplot(width = .2) +
# geom_boxplot(position=position_dodge(1)) +
ggtitle(paste0(geneListJ)) +
xlab(paste0(XLab))
theme_classic()
return(p)
}
for(i in 1:length(f1.files)){
# i <- 1
wb <- loadWorkbook(paste0(fl,f1.files[i]))
stNames <- names(wb)
cons <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[1])
dis <- readxl::read_xlsx(path = paste0(fl,f1.files[i]), sheet = stNames[2])
for(j in 1:length(geneList)){
# j <- 14
if(geneList[j] %in% cons$GeneID){
expre.con <- cons %>% filter(.$GeneID == geneList[j])
expre.dis <- dis %>% filter(.$GeneID == geneList[j])
if(t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value < 0.05){
ttestRes <- t.test(expre.con[,-1],expre.dis[,-1], alternative = 'two.sided')$p.value
geneFC <- mean(as.numeric(expre.dis[,-1]))/mean(as.numeric(expre.con[,-1]))
geneFC <- ifelse(geneFC>1,geneFC,-1/geneFC)
xLab <- paste0('p-value: ',round(ttestRes,digits = 4),' FC ',round(geneFC,digits = 2))
df.con <- expre.con[,-1]
colnames(df.con) <- rep('control',ncol(df.con))
df.dis <- expre.dis[,-1]
colnames(df.dis) <- rep('AD',ncol(df.dis))
df <- cbind(df.con,df.dis) %>%
pivot_longer(cols = starts_with('AD')|starts_with('con'),
names_to = 'Condition',
values_to = 'Expression')
fname <- gsub('.xlsx','',f1.files[i])
geneListJ <- paste0(geneList[j],'_',fname)
png(filename = paste0('D:/Projects/NIH/Mouse/Data/Comp/Plots/',geneList[j],'_Gene_',fname,'.png'),
width = 4.5, height = 4.5, res = 600, units = 'in')
print(boxPlotter(df,xLab,geneListJ))
dev.off()
}
}
}
}
save.image('MethodologyComparison.RData')
